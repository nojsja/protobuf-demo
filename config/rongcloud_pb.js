/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Protobuf.Add2BlackListInput', null, global);
goog.exportSymbol('proto.Protobuf.BlackListStatusInput', null, global);
goog.exportSymbol('proto.Protobuf.BlockPushInput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelEvictionInput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelInfoInput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelInfoOutput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelInfosInput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelInfosOutput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelInvitationInput', null, global);
goog.exportSymbol('proto.Protobuf.ChannelType', null, global);
goog.exportSymbol('proto.Protobuf.ChrmInput', null, global);
goog.exportSymbol('proto.Protobuf.ChrmOutput', null, global);
goog.exportSymbol('proto.Protobuf.ChrmPullMsg', null, global);
goog.exportSymbol('proto.Protobuf.ConnAckMessage', null, global);
goog.exportSymbol('proto.Protobuf.ConversationItem', null, global);
goog.exportSymbol('proto.Protobuf.CreateDiscussionInput', null, global);
goog.exportSymbol('proto.Protobuf.CreateDiscussionOutput', null, global);
goog.exportSymbol('proto.Protobuf.DisconnenctMessage', null, global);
goog.exportSymbol('proto.Protobuf.DownStreamMessage', null, global);
goog.exportSymbol('proto.Protobuf.DownStreamMessages', null, global);
goog.exportSymbol('proto.Protobuf.FileType', null, global);
goog.exportSymbol('proto.Protobuf.GetQNdownloadUrlInput', null, global);
goog.exportSymbol('proto.Protobuf.GetQNdownloadUrlOutput', null, global);
goog.exportSymbol('proto.Protobuf.GetQNupTokenInput', null, global);
goog.exportSymbol('proto.Protobuf.GetQNupTokenOutput', null, global);
goog.exportSymbol('proto.Protobuf.GetSessionIdInput', null, global);
goog.exportSymbol('proto.Protobuf.GetSessionIdOutput', null, global);
goog.exportSymbol('proto.Protobuf.GetUserInfoInput', null, global);
goog.exportSymbol('proto.Protobuf.GetUserInfoOutput', null, global);
goog.exportSymbol('proto.Protobuf.GroupHashInput', null, global);
goog.exportSymbol('proto.Protobuf.GroupHashOutput', null, global);
goog.exportSymbol('proto.Protobuf.GroupHashType', null, global);
goog.exportSymbol('proto.Protobuf.GroupInfo', null, global);
goog.exportSymbol('proto.Protobuf.GroupInput', null, global);
goog.exportSymbol('proto.Protobuf.GroupMembersInput', null, global);
goog.exportSymbol('proto.Protobuf.GroupMembersOutput', null, global);
goog.exportSymbol('proto.Protobuf.GroupOutput', null, global);
goog.exportSymbol('proto.Protobuf.HistoryMessageInput', null, global);
goog.exportSymbol('proto.Protobuf.HistoryMessagesOuput', null, global);
goog.exportSymbol('proto.Protobuf.LeaveChannelInput', null, global);
goog.exportSymbol('proto.Protobuf.MemberInfo', null, global);
goog.exportSymbol('proto.Protobuf.MessageItem', null, global);
goog.exportSymbol('proto.Protobuf.ModifyPermissionInput', null, global);
goog.exportSymbol('proto.Protobuf.NotifyMsg', null, global);
goog.exportSymbol('proto.Protobuf.PubAckMessage', null, global);
goog.exportSymbol('proto.Protobuf.PublishMessage', null, global);
goog.exportSymbol('proto.Protobuf.QueryAckMessage', null, global);
goog.exportSymbol('proto.Protobuf.QueryBlackListInput', null, global);
goog.exportSymbol('proto.Protobuf.QueryBlackListOutput', null, global);
goog.exportSymbol('proto.Protobuf.QueryConMessage', null, global);
goog.exportSymbol('proto.Protobuf.QueryConvAckMessage', null, global);
goog.exportSymbol('proto.Protobuf.QueryMessage', null, global);
goog.exportSymbol('proto.Protobuf.QueryMsgAckMessage', null, global);
goog.exportSymbol('proto.Protobuf.RelationInfo', null, global);
goog.exportSymbol('proto.Protobuf.RelationsInput', null, global);
goog.exportSymbol('proto.Protobuf.RelationsOutput', null, global);
goog.exportSymbol('proto.Protobuf.RemoveFromBlackListInput', null, global);
goog.exportSymbol('proto.Protobuf.RenameChannelInput', null, global);
goog.exportSymbol('proto.Protobuf.SyncRequestMsg', null, global);
goog.exportSymbol('proto.Protobuf.UpStreamMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.PubAckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.PubAckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.PubAckMessage.displayName = 'proto.Protobuf.PubAckMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.PubAckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.PubAckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.PubAckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.PubAckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getField(msg, 1),
    messageuid: jspb.Message.getField(msg, 2),
    timestamp: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.PubAckMessage}
 */
proto.Protobuf.PubAckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.PubAckMessage;
  return proto.Protobuf.PubAckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.PubAckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.PubAckMessage}
 */
proto.Protobuf.PubAckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.PubAckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.PubAckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.PubAckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.PubAckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string messageId = 1;
 * @return {string}
 */
proto.Protobuf.PubAckMessage.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.PubAckMessage.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.PubAckMessage.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.PubAckMessage.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string messageUId = 2;
 * @return {string}
 */
proto.Protobuf.PubAckMessage.prototype.getMessageuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.PubAckMessage.prototype.setMessageuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.PubAckMessage.prototype.clearMessageuid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.PubAckMessage.prototype.hasMessageuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 timestamp = 3;
 * @return {number}
 */
proto.Protobuf.PubAckMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protobuf.PubAckMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.PubAckMessage.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.PubAckMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.PublishMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.PublishMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.PublishMessage.displayName = 'proto.Protobuf.PublishMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.PublishMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.PublishMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.PublishMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.PublishMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getField(msg, 1),
    messageuid: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.PublishMessage}
 */
proto.Protobuf.PublishMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.PublishMessage;
  return proto.Protobuf.PublishMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.PublishMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.PublishMessage}
 */
proto.Protobuf.PublishMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.PublishMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.PublishMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.PublishMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.PublishMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string messageId = 1;
 * @return {string}
 */
proto.Protobuf.PublishMessage.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.PublishMessage.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.PublishMessage.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.PublishMessage.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string messageUId = 2;
 * @return {string}
 */
proto.Protobuf.PublishMessage.prototype.getMessageuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.PublishMessage.prototype.setMessageuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.PublishMessage.prototype.clearMessageuid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.PublishMessage.prototype.hasMessageuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 status = 4;
 * @return {number}
 */
proto.Protobuf.PublishMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Protobuf.PublishMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.PublishMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.PublishMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ConnAckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ConnAckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ConnAckMessage.displayName = 'proto.Protobuf.ConnAckMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ConnAckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ConnAckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ConnAckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ConnAckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2),
    sessionid: jspb.Message.getField(msg, 3),
    timestamp: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ConnAckMessage}
 */
proto.Protobuf.ConnAckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ConnAckMessage;
  return proto.Protobuf.ConnAckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ConnAckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ConnAckMessage}
 */
proto.Protobuf.ConnAckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ConnAckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ConnAckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ConnAckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ConnAckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required int32 status = 1;
 * @return {number}
 */
proto.Protobuf.ConnAckMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ConnAckMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ConnAckMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConnAckMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userId = 2;
 * @return {string}
 */
proto.Protobuf.ConnAckMessage.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.ConnAckMessage.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.ConnAckMessage.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConnAckMessage.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string sessionId = 3;
 * @return {string}
 */
proto.Protobuf.ConnAckMessage.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protobuf.ConnAckMessage.prototype.setSessionid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.ConnAckMessage.prototype.clearSessionid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConnAckMessage.prototype.hasSessionid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 timestamp = 4;
 * @return {number}
 */
proto.Protobuf.ConnAckMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Protobuf.ConnAckMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.ConnAckMessage.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConnAckMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.QueryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryMessage.displayName = 'proto.Protobuf.QueryMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getField(msg, 1),
    topic: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3),
    targetid: jspb.Message.getField(msg, 4),
    timestamp: jspb.Message.getField(msg, 5),
    messageuid: jspb.Message.getField(msg, 6),
    order: jspb.Message.getField(msg, 7),
    sendtimestamp: jspb.Message.getField(msg, 8),
    synctimestamp: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryMessage}
 */
proto.Protobuf.QueryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryMessage;
  return proto.Protobuf.QueryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryMessage}
 */
proto.Protobuf.QueryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageuid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtimestamp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSynctimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * required string messageId = 1;
 * @return {string}
 */
proto.Protobuf.QueryMessage.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.QueryMessage.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.QueryMessage.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 topic = 2;
 * @return {number}
 */
proto.Protobuf.QueryMessage.prototype.getTopic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.QueryMessage.prototype.setTopic = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.QueryMessage.prototype.clearTopic = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 count = 3;
 * @return {number}
 */
proto.Protobuf.QueryMessage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protobuf.QueryMessage.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.QueryMessage.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string targetId = 4;
 * @return {string}
 */
proto.Protobuf.QueryMessage.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protobuf.QueryMessage.prototype.setTargetid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.QueryMessage.prototype.clearTargetid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasTargetid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.Protobuf.QueryMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Protobuf.QueryMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Protobuf.QueryMessage.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string messageUId = 6;
 * @return {string}
 */
proto.Protobuf.QueryMessage.prototype.getMessageuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Protobuf.QueryMessage.prototype.setMessageuid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Protobuf.QueryMessage.prototype.clearMessageuid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasMessageuid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 order = 7;
 * @return {number}
 */
proto.Protobuf.QueryMessage.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Protobuf.QueryMessage.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Protobuf.QueryMessage.prototype.clearOrder = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 sendTimestamp = 8;
 * @return {number}
 */
proto.Protobuf.QueryMessage.prototype.getSendtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Protobuf.QueryMessage.prototype.setSendtimestamp = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Protobuf.QueryMessage.prototype.clearSendtimestamp = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasSendtimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 syncTimestamp = 9;
 * @return {number}
 */
proto.Protobuf.QueryMessage.prototype.getSynctimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Protobuf.QueryMessage.prototype.setSynctimestamp = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Protobuf.QueryMessage.prototype.clearSynctimestamp = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryMessage.prototype.hasSynctimestamp = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.MessageItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.MessageItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.MessageItem.displayName = 'proto.Protobuf.MessageItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.MessageItem.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.MessageItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.MessageItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.MessageItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    classname: jspb.Message.getField(msg, 2),
    topic: jspb.Message.getField(msg, 3),
    targetid: jspb.Message.getField(msg, 4),
    status: jspb.Message.getField(msg, 5),
    extra: jspb.Message.getField(msg, 6),
    content: msg.getContent_asB64(),
    timestamp: jspb.Message.getField(msg, 8),
    fromuserid: jspb.Message.getField(msg, 9),
    direction: jspb.Message.getField(msg, 10),
    messageuid: jspb.Message.getField(msg, 11),
    groupid: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.MessageItem}
 */
proto.Protobuf.MessageItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.MessageItem;
  return proto.Protobuf.MessageItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.MessageItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.MessageItem}
 */
proto.Protobuf.MessageItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtra(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromuserid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirection(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageuid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.MessageItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.MessageItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.MessageItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.MessageItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.Protobuf.MessageItem.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.MessageItem.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.MessageItem.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string classname = 2;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setClassname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.MessageItem.prototype.clearClassname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasClassname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string topic = 3;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setTopic = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.MessageItem.prototype.clearTopic = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string targetId = 4;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setTargetid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.MessageItem.prototype.clearTargetid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasTargetid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 status = 5;
 * @return {number}
 */
proto.Protobuf.MessageItem.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Protobuf.MessageItem.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Protobuf.MessageItem.prototype.clearStatus = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string extra = 6;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getExtra = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setExtra = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Protobuf.MessageItem.prototype.clearExtra = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required bytes content = 7;
 * @return {!(string|Uint8Array)}
 */
proto.Protobuf.MessageItem.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * required bytes content = 7;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.Protobuf.MessageItem.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.Protobuf.MessageItem.prototype.setContent = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Protobuf.MessageItem.prototype.clearContent = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasContent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int64 timestamp = 8;
 * @return {number}
 */
proto.Protobuf.MessageItem.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Protobuf.MessageItem.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Protobuf.MessageItem.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required string fromUserId = 9;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getFromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setFromuserid = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Protobuf.MessageItem.prototype.clearFromuserid = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasFromuserid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int32 direction = 10;
 * @return {number}
 */
proto.Protobuf.MessageItem.prototype.getDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Protobuf.MessageItem.prototype.setDirection = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Protobuf.MessageItem.prototype.clearDirection = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string messageUId = 11;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getMessageuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setMessageuid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Protobuf.MessageItem.prototype.clearMessageuid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasMessageuid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string groupId = 12;
 * @return {string}
 */
proto.Protobuf.MessageItem.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Protobuf.MessageItem.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Protobuf.MessageItem.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MessageItem.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ConversationItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ConversationItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ConversationItem.displayName = 'proto.Protobuf.ConversationItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ConversationItem.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ConversationItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ConversationItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ConversationItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    targetid: jspb.Message.getField(msg, 2),
    istop: jspb.Message.getField(msg, 3),
    message: (f = msg.getMessage()) && proto.Protobuf.MessageItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ConversationItem}
 */
proto.Protobuf.ConversationItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ConversationItem;
  return proto.Protobuf.ConversationItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ConversationItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ConversationItem}
 */
proto.Protobuf.ConversationItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIstop(value);
      break;
    case 4:
      var value = new proto.Protobuf.MessageItem;
      reader.readMessage(value,proto.Protobuf.MessageItem.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ConversationItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ConversationItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ConversationItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ConversationItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Protobuf.MessageItem.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.Protobuf.ConversationItem.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ConversationItem.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ConversationItem.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConversationItem.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string targetId = 2;
 * @return {string}
 */
proto.Protobuf.ConversationItem.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.ConversationItem.prototype.setTargetid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.ConversationItem.prototype.clearTargetid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConversationItem.prototype.hasTargetid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isTop = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Protobuf.ConversationItem.prototype.getIstop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Protobuf.ConversationItem.prototype.setIstop = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.ConversationItem.prototype.clearIstop = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConversationItem.prototype.hasIstop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required MessageItem message = 4;
 * @return {!proto.Protobuf.MessageItem}
 */
proto.Protobuf.ConversationItem.prototype.getMessage = function() {
  return /** @type{!proto.Protobuf.MessageItem} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.MessageItem, 4, 1));
};


/** @param {!proto.Protobuf.MessageItem} value */
proto.Protobuf.ConversationItem.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Protobuf.ConversationItem.prototype.clearMessage = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ConversationItem.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryAckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 4, null, null);
};
goog.inherits(proto.Protobuf.QueryAckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryAckMessage.displayName = 'proto.Protobuf.QueryAckMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryAckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryAckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryAckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryAckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    lengthsize: jspb.Message.getField(msg, 1),
    messageid: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.Protobuf.QueryAckMessage.extensions, proto.Protobuf.QueryAckMessage.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryAckMessage}
 */
proto.Protobuf.QueryAckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryAckMessage;
  return proto.Protobuf.QueryAckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryAckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryAckMessage}
 */
proto.Protobuf.QueryAckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLengthsize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.Protobuf.QueryAckMessage.extensionsBinary,
        proto.Protobuf.QueryAckMessage.prototype.getExtension,
        proto.Protobuf.QueryAckMessage.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryAckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryAckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryAckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryAckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.Protobuf.QueryAckMessage.extensionsBinary, proto.Protobuf.QueryAckMessage.prototype.getExtension);
};


/**
 * required int32 lengthSize = 1;
 * @return {number}
 */
proto.Protobuf.QueryAckMessage.prototype.getLengthsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.QueryAckMessage.prototype.setLengthsize = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.QueryAckMessage.prototype.clearLengthsize = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryAckMessage.prototype.hasLengthsize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string messageId = 2;
 * @return {string}
 */
proto.Protobuf.QueryAckMessage.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.QueryAckMessage.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.QueryAckMessage.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryAckMessage.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 status = 3;
 * @return {number}
 */
proto.Protobuf.QueryAckMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protobuf.QueryAckMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.QueryAckMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryAckMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.Protobuf.QueryAckMessage.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.Protobuf.QueryAckMessage.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryMsgAckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.QueryMsgAckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryMsgAckMessage.displayName = 'proto.Protobuf.QueryMsgAckMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryMsgAckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryMsgAckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryMsgAckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryMsgAckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryMsgAckMessage}
 */
proto.Protobuf.QueryMsgAckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryMsgAckMessage;
  return proto.Protobuf.QueryMsgAckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryMsgAckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryMsgAckMessage}
 */
proto.Protobuf.QueryMsgAckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryMsgAckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryMsgAckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryMsgAckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryMsgAckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `listList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<!proto.Protobuf.MessageItem>>}
 */
proto.Protobuf.QueryMsgAckMessage.listList = new jspb.ExtensionFieldInfo(
    4,
    {listList: 0},
    proto.Protobuf.MessageItem,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.Protobuf.MessageItem.toObject),
    1);

proto.Protobuf.QueryAckMessage.extensionsBinary[4] = new jspb.ExtensionFieldBinaryInfo(
    proto.Protobuf.QueryMsgAckMessage.listList,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeRepeatedMessage,
    proto.Protobuf.MessageItem.serializeBinaryToWriter,
    proto.Protobuf.MessageItem.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.Protobuf.QueryAckMessage.extensions[4] = proto.Protobuf.QueryMsgAckMessage.listList;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `listList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<!proto.Protobuf.MessageItem>>}
 */
proto.Protobuf.QueryMsgAckMessage.listList = new jspb.ExtensionFieldInfo(
    4,
    {listList: 0},
    proto.Protobuf.MessageItem,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.Protobuf.MessageItem.toObject),
    1);

proto.Protobuf.QueryAckMessage.extensionsBinary[4] = new jspb.ExtensionFieldBinaryInfo(
    proto.Protobuf.QueryMsgAckMessage.listList,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeRepeatedMessage,
    proto.Protobuf.MessageItem.serializeBinaryToWriter,
    proto.Protobuf.MessageItem.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.Protobuf.QueryAckMessage.extensions[4] = proto.Protobuf.QueryMsgAckMessage.listList;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryConvAckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.QueryConvAckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryConvAckMessage.displayName = 'proto.Protobuf.QueryConvAckMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryConvAckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryConvAckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryConvAckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryConvAckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryConvAckMessage}
 */
proto.Protobuf.QueryConvAckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryConvAckMessage;
  return proto.Protobuf.QueryConvAckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryConvAckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryConvAckMessage}
 */
proto.Protobuf.QueryConvAckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryConvAckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryConvAckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryConvAckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryConvAckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `listList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<!proto.Protobuf.ConversationItem>>}
 */
proto.Protobuf.QueryConvAckMessage.listList = new jspb.ExtensionFieldInfo(
    5,
    {listList: 0},
    proto.Protobuf.ConversationItem,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.Protobuf.ConversationItem.toObject),
    1);

proto.Protobuf.QueryAckMessage.extensionsBinary[5] = new jspb.ExtensionFieldBinaryInfo(
    proto.Protobuf.QueryConvAckMessage.listList,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeRepeatedMessage,
    proto.Protobuf.ConversationItem.serializeBinaryToWriter,
    proto.Protobuf.ConversationItem.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.Protobuf.QueryAckMessage.extensions[5] = proto.Protobuf.QueryConvAckMessage.listList;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `listList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<!proto.Protobuf.ConversationItem>>}
 */
proto.Protobuf.QueryConvAckMessage.listList = new jspb.ExtensionFieldInfo(
    5,
    {listList: 0},
    proto.Protobuf.ConversationItem,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.Protobuf.ConversationItem.toObject),
    1);

proto.Protobuf.QueryAckMessage.extensionsBinary[5] = new jspb.ExtensionFieldBinaryInfo(
    proto.Protobuf.QueryConvAckMessage.listList,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeRepeatedMessage,
    proto.Protobuf.ConversationItem.serializeBinaryToWriter,
    proto.Protobuf.ConversationItem.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.Protobuf.QueryAckMessage.extensions[5] = proto.Protobuf.QueryConvAckMessage.listList;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryConMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.QueryConMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryConMessage.displayName = 'proto.Protobuf.QueryConMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryConMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryConMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryConMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryConMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryConMessage}
 */
proto.Protobuf.QueryConMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryConMessage;
  return proto.Protobuf.QueryConMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryConMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryConMessage}
 */
proto.Protobuf.QueryConMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryConMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryConMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryConMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryConMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string messageId = 1;
 * @return {string}
 */
proto.Protobuf.QueryConMessage.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.QueryConMessage.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.QueryConMessage.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryConMessage.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.DisconnenctMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.DisconnenctMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.DisconnenctMessage.displayName = 'proto.Protobuf.DisconnenctMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.DisconnenctMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.DisconnenctMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.DisconnenctMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.DisconnenctMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.DisconnenctMessage}
 */
proto.Protobuf.DisconnenctMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.DisconnenctMessage;
  return proto.Protobuf.DisconnenctMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.DisconnenctMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.DisconnenctMessage}
 */
proto.Protobuf.DisconnenctMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.DisconnenctMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.DisconnenctMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.DisconnenctMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.DisconnenctMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 status = 1;
 * @return {number}
 */
proto.Protobuf.DisconnenctMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.DisconnenctMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.DisconnenctMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DisconnenctMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.HistoryMessageInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.HistoryMessageInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.HistoryMessageInput.displayName = 'proto.Protobuf.HistoryMessageInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.HistoryMessageInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.HistoryMessageInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.HistoryMessageInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.HistoryMessageInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetid: jspb.Message.getField(msg, 1),
    timestamp: jspb.Message.getField(msg, 2),
    len: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.HistoryMessageInput}
 */
proto.Protobuf.HistoryMessageInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.HistoryMessageInput;
  return proto.Protobuf.HistoryMessageInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.HistoryMessageInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.HistoryMessageInput}
 */
proto.Protobuf.HistoryMessageInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.HistoryMessageInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.HistoryMessageInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.HistoryMessageInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.HistoryMessageInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string targetId = 1;
 * @return {string}
 */
proto.Protobuf.HistoryMessageInput.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.HistoryMessageInput.prototype.setTargetid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.HistoryMessageInput.prototype.clearTargetid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.HistoryMessageInput.prototype.hasTargetid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 timestamp = 2;
 * @return {number}
 */
proto.Protobuf.HistoryMessageInput.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.HistoryMessageInput.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.HistoryMessageInput.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.HistoryMessageInput.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 len = 3;
 * @return {number}
 */
proto.Protobuf.HistoryMessageInput.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protobuf.HistoryMessageInput.prototype.setLen = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.HistoryMessageInput.prototype.clearLen = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.HistoryMessageInput.prototype.hasLen = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.HistoryMessagesOuput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.HistoryMessagesOuput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.HistoryMessagesOuput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.HistoryMessagesOuput.displayName = 'proto.Protobuf.HistoryMessagesOuput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.HistoryMessagesOuput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.HistoryMessagesOuput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.HistoryMessagesOuput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.HistoryMessagesOuput.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.Protobuf.DownStreamMessage.toObject, includeInstance),
    synctime: jspb.Message.getField(msg, 2),
    hasmsg: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.HistoryMessagesOuput}
 */
proto.Protobuf.HistoryMessagesOuput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.HistoryMessagesOuput;
  return proto.Protobuf.HistoryMessagesOuput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.HistoryMessagesOuput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.HistoryMessagesOuput}
 */
proto.Protobuf.HistoryMessagesOuput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.DownStreamMessage;
      reader.readMessage(value,proto.Protobuf.DownStreamMessage.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSynctime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHasmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.HistoryMessagesOuput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.HistoryMessagesOuput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.HistoryMessagesOuput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.DownStreamMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated DownStreamMessage list = 1;
 * @return {!Array<!proto.Protobuf.DownStreamMessage>}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.getListList = function() {
  return /** @type{!Array<!proto.Protobuf.DownStreamMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.DownStreamMessage, 1));
};


/** @param {!Array<!proto.Protobuf.DownStreamMessage>} value */
proto.Protobuf.HistoryMessagesOuput.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.DownStreamMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.DownStreamMessage}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.DownStreamMessage, opt_index);
};


proto.Protobuf.HistoryMessagesOuput.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * required int64 syncTime = 2;
 * @return {number}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.getSynctime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.HistoryMessagesOuput.prototype.setSynctime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.HistoryMessagesOuput.prototype.clearSynctime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.hasSynctime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 hasMsg = 3;
 * @return {number}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.getHasmsg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protobuf.HistoryMessagesOuput.prototype.setHasmsg = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.HistoryMessagesOuput.prototype.clearHasmsg = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.HistoryMessagesOuput.prototype.hasHasmsg = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.NotifyMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.NotifyMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.NotifyMsg.displayName = 'proto.Protobuf.NotifyMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.NotifyMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.NotifyMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.NotifyMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.NotifyMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.NotifyMsg}
 */
proto.Protobuf.NotifyMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.NotifyMsg;
  return proto.Protobuf.NotifyMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.NotifyMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.NotifyMsg}
 */
proto.Protobuf.NotifyMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.NotifyMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.NotifyMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.NotifyMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.NotifyMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.Protobuf.NotifyMsg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.NotifyMsg.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.NotifyMsg.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.NotifyMsg.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.Protobuf.NotifyMsg.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.NotifyMsg.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.NotifyMsg.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.NotifyMsg.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.SyncRequestMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.SyncRequestMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.SyncRequestMsg.displayName = 'proto.Protobuf.SyncRequestMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.SyncRequestMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.SyncRequestMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.SyncRequestMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.SyncRequestMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    synctime: jspb.Message.getField(msg, 1),
    ispolling: jspb.Message.getField(msg, 2),
    isweb: jspb.Message.getField(msg, 3),
    ispullsend: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.SyncRequestMsg}
 */
proto.Protobuf.SyncRequestMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.SyncRequestMsg;
  return proto.Protobuf.SyncRequestMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.SyncRequestMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.SyncRequestMsg}
 */
proto.Protobuf.SyncRequestMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSynctime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspolling(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsweb(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspullsend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.SyncRequestMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.SyncRequestMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.SyncRequestMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.SyncRequestMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required int64 syncTime = 1;
 * @return {number}
 */
proto.Protobuf.SyncRequestMsg.prototype.getSynctime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.SyncRequestMsg.prototype.setSynctime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.SyncRequestMsg.prototype.clearSynctime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.hasSynctime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool ispolling = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.getIspolling = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Protobuf.SyncRequestMsg.prototype.setIspolling = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.SyncRequestMsg.prototype.clearIspolling = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.hasIspolling = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isweb = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.getIsweb = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Protobuf.SyncRequestMsg.prototype.setIsweb = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.SyncRequestMsg.prototype.clearIsweb = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.hasIsweb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isPullSend = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.getIspullsend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Protobuf.SyncRequestMsg.prototype.setIspullsend = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.SyncRequestMsg.prototype.clearIspullsend = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.SyncRequestMsg.prototype.hasIspullsend = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.UpStreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.UpStreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.UpStreamMessage.displayName = 'proto.Protobuf.UpStreamMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.UpStreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.UpStreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.UpStreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.UpStreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getField(msg, 1),
    classname: jspb.Message.getField(msg, 2),
    content: msg.getContent_asB64(),
    pushtext: jspb.Message.getField(msg, 4),
    appdata: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.UpStreamMessage}
 */
proto.Protobuf.UpStreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.UpStreamMessage;
  return proto.Protobuf.UpStreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.UpStreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.UpStreamMessage}
 */
proto.Protobuf.UpStreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPushtext(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.UpStreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.UpStreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.UpStreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.UpStreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required int32 sessionId = 1;
 * @return {number}
 */
proto.Protobuf.UpStreamMessage.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.UpStreamMessage.prototype.setSessionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.UpStreamMessage.prototype.clearSessionid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.UpStreamMessage.prototype.hasSessionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string classname = 2;
 * @return {string}
 */
proto.Protobuf.UpStreamMessage.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.UpStreamMessage.prototype.setClassname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.UpStreamMessage.prototype.clearClassname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.UpStreamMessage.prototype.hasClassname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Protobuf.UpStreamMessage.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.Protobuf.UpStreamMessage.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.Protobuf.UpStreamMessage.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.Protobuf.UpStreamMessage.prototype.setContent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.UpStreamMessage.prototype.clearContent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.UpStreamMessage.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string pushText = 4;
 * @return {string}
 */
proto.Protobuf.UpStreamMessage.prototype.getPushtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protobuf.UpStreamMessage.prototype.setPushtext = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.UpStreamMessage.prototype.clearPushtext = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.UpStreamMessage.prototype.hasPushtext = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string appData = 5;
 * @return {string}
 */
proto.Protobuf.UpStreamMessage.prototype.getAppdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Protobuf.UpStreamMessage.prototype.setAppdata = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Protobuf.UpStreamMessage.prototype.clearAppdata = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.UpStreamMessage.prototype.hasAppdata = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.DownStreamMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.DownStreamMessages.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.DownStreamMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.DownStreamMessages.displayName = 'proto.Protobuf.DownStreamMessages';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.DownStreamMessages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.DownStreamMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.DownStreamMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.DownStreamMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.DownStreamMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.Protobuf.DownStreamMessage.toObject, includeInstance),
    synctime: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.DownStreamMessages}
 */
proto.Protobuf.DownStreamMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.DownStreamMessages;
  return proto.Protobuf.DownStreamMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.DownStreamMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.DownStreamMessages}
 */
proto.Protobuf.DownStreamMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.DownStreamMessage;
      reader.readMessage(value,proto.Protobuf.DownStreamMessage.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSynctime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.DownStreamMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.DownStreamMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.DownStreamMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.DownStreamMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.DownStreamMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated DownStreamMessage list = 1;
 * @return {!Array<!proto.Protobuf.DownStreamMessage>}
 */
proto.Protobuf.DownStreamMessages.prototype.getListList = function() {
  return /** @type{!Array<!proto.Protobuf.DownStreamMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.DownStreamMessage, 1));
};


/** @param {!Array<!proto.Protobuf.DownStreamMessage>} value */
proto.Protobuf.DownStreamMessages.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.DownStreamMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.DownStreamMessage}
 */
proto.Protobuf.DownStreamMessages.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.DownStreamMessage, opt_index);
};


proto.Protobuf.DownStreamMessages.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * required int64 syncTime = 2;
 * @return {number}
 */
proto.Protobuf.DownStreamMessages.prototype.getSynctime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.DownStreamMessages.prototype.setSynctime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.DownStreamMessages.prototype.clearSynctime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessages.prototype.hasSynctime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.DownStreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.DownStreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.DownStreamMessage.displayName = 'proto.Protobuf.DownStreamMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.DownStreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.DownStreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.DownStreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.DownStreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromuserid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    groupid: jspb.Message.getField(msg, 3),
    classname: jspb.Message.getField(msg, 4),
    content: msg.getContent_asB64(),
    datatime: jspb.Message.getField(msg, 6),
    status: jspb.Message.getField(msg, 7),
    extra: jspb.Message.getField(msg, 8),
    msgid: jspb.Message.getField(msg, 9),
    direction: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.DownStreamMessage}
 */
proto.Protobuf.DownStreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.DownStreamMessage;
  return proto.Protobuf.DownStreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.DownStreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.DownStreamMessage}
 */
proto.Protobuf.DownStreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromuserid(value);
      break;
    case 2:
      var value = /** @type {!proto.Protobuf.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatatime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExtra(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.DownStreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.DownStreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.DownStreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.DownStreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * required string fromUserId = 1;
 * @return {string}
 */
proto.Protobuf.DownStreamMessage.prototype.getFromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.DownStreamMessage.prototype.setFromuserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearFromuserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasFromuserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ChannelType type = 2;
 * @return {!proto.Protobuf.ChannelType}
 */
proto.Protobuf.DownStreamMessage.prototype.getType = function() {
  return /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.Protobuf.ChannelType} value */
proto.Protobuf.DownStreamMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string groupId = 3;
 * @return {string}
 */
proto.Protobuf.DownStreamMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protobuf.DownStreamMessage.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string classname = 4;
 * @return {string}
 */
proto.Protobuf.DownStreamMessage.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protobuf.DownStreamMessage.prototype.setClassname = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearClassname = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasClassname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes content = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Protobuf.DownStreamMessage.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes content = 5;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.Protobuf.DownStreamMessage.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.Protobuf.DownStreamMessage.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.Protobuf.DownStreamMessage.prototype.setContent = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearContent = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasContent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int64 dataTime = 6;
 * @return {number}
 */
proto.Protobuf.DownStreamMessage.prototype.getDatatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Protobuf.DownStreamMessage.prototype.setDatatime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearDatatime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasDatatime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int64 status = 7;
 * @return {number}
 */
proto.Protobuf.DownStreamMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Protobuf.DownStreamMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 extra = 8;
 * @return {number}
 */
proto.Protobuf.DownStreamMessage.prototype.getExtra = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Protobuf.DownStreamMessage.prototype.setExtra = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearExtra = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string msgId = 9;
 * @return {string}
 */
proto.Protobuf.DownStreamMessage.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Protobuf.DownStreamMessage.prototype.setMsgid = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearMsgid = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasMsgid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 direction = 10;
 * @return {number}
 */
proto.Protobuf.DownStreamMessage.prototype.getDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Protobuf.DownStreamMessage.prototype.setDirection = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Protobuf.DownStreamMessage.prototype.clearDirection = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.DownStreamMessage.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.CreateDiscussionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.CreateDiscussionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.CreateDiscussionInput.displayName = 'proto.Protobuf.CreateDiscussionInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.CreateDiscussionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.CreateDiscussionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.CreateDiscussionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.CreateDiscussionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.CreateDiscussionInput}
 */
proto.Protobuf.CreateDiscussionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.CreateDiscussionInput;
  return proto.Protobuf.CreateDiscussionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.CreateDiscussionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.CreateDiscussionInput}
 */
proto.Protobuf.CreateDiscussionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.CreateDiscussionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.CreateDiscussionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.CreateDiscussionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.CreateDiscussionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Protobuf.CreateDiscussionInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.CreateDiscussionInput.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.CreateDiscussionInput.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.CreateDiscussionInput.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.CreateDiscussionOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.CreateDiscussionOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.CreateDiscussionOutput.displayName = 'proto.Protobuf.CreateDiscussionOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.CreateDiscussionOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.CreateDiscussionOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.CreateDiscussionOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.CreateDiscussionOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.CreateDiscussionOutput}
 */
proto.Protobuf.CreateDiscussionOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.CreateDiscussionOutput;
  return proto.Protobuf.CreateDiscussionOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.CreateDiscussionOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.CreateDiscussionOutput}
 */
proto.Protobuf.CreateDiscussionOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.CreateDiscussionOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.CreateDiscussionOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.CreateDiscussionOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.CreateDiscussionOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.Protobuf.CreateDiscussionOutput.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.CreateDiscussionOutput.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.CreateDiscussionOutput.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.CreateDiscussionOutput.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChannelInvitationInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.ChannelInvitationInput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.ChannelInvitationInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChannelInvitationInput.displayName = 'proto.Protobuf.ChannelInvitationInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.ChannelInvitationInput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChannelInvitationInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChannelInvitationInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChannelInvitationInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInvitationInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChannelInvitationInput}
 */
proto.Protobuf.ChannelInvitationInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChannelInvitationInput;
  return proto.Protobuf.ChannelInvitationInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChannelInvitationInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChannelInvitationInput}
 */
proto.Protobuf.ChannelInvitationInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChannelInvitationInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChannelInvitationInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChannelInvitationInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInvitationInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string users = 1;
 * @return {!Array<string>}
 */
proto.Protobuf.ChannelInvitationInput.prototype.getUsersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.Protobuf.ChannelInvitationInput.prototype.setUsersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Protobuf.ChannelInvitationInput.prototype.addUsers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Protobuf.ChannelInvitationInput.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.LeaveChannelInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.LeaveChannelInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.LeaveChannelInput.displayName = 'proto.Protobuf.LeaveChannelInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.LeaveChannelInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.LeaveChannelInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.LeaveChannelInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.LeaveChannelInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.LeaveChannelInput}
 */
proto.Protobuf.LeaveChannelInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.LeaveChannelInput;
  return proto.Protobuf.LeaveChannelInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.LeaveChannelInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.LeaveChannelInput}
 */
proto.Protobuf.LeaveChannelInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.LeaveChannelInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.LeaveChannelInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.LeaveChannelInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.LeaveChannelInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.LeaveChannelInput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.LeaveChannelInput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.LeaveChannelInput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.LeaveChannelInput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChannelEvictionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ChannelEvictionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChannelEvictionInput.displayName = 'proto.Protobuf.ChannelEvictionInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChannelEvictionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChannelEvictionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChannelEvictionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelEvictionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChannelEvictionInput}
 */
proto.Protobuf.ChannelEvictionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChannelEvictionInput;
  return proto.Protobuf.ChannelEvictionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChannelEvictionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChannelEvictionInput}
 */
proto.Protobuf.ChannelEvictionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChannelEvictionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChannelEvictionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChannelEvictionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelEvictionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string user = 1;
 * @return {string}
 */
proto.Protobuf.ChannelEvictionInput.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.ChannelEvictionInput.prototype.setUser = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChannelEvictionInput.prototype.clearUser = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelEvictionInput.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.RenameChannelInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.RenameChannelInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.RenameChannelInput.displayName = 'proto.Protobuf.RenameChannelInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.RenameChannelInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.RenameChannelInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.RenameChannelInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RenameChannelInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.RenameChannelInput}
 */
proto.Protobuf.RenameChannelInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.RenameChannelInput;
  return proto.Protobuf.RenameChannelInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.RenameChannelInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.RenameChannelInput}
 */
proto.Protobuf.RenameChannelInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.RenameChannelInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.RenameChannelInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.RenameChannelInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RenameChannelInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Protobuf.RenameChannelInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.RenameChannelInput.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.RenameChannelInput.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RenameChannelInput.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChannelInfoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ChannelInfoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChannelInfoInput.displayName = 'proto.Protobuf.ChannelInfoInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChannelInfoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChannelInfoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChannelInfoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChannelInfoInput}
 */
proto.Protobuf.ChannelInfoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChannelInfoInput;
  return proto.Protobuf.ChannelInfoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChannelInfoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChannelInfoInput}
 */
proto.Protobuf.ChannelInfoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChannelInfoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChannelInfoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChannelInfoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.ChannelInfoInput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ChannelInfoInput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChannelInfoInput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfoInput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChannelInfoOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.ChannelInfoOutput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.ChannelInfoOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChannelInfoOutput.displayName = 'proto.Protobuf.ChannelInfoOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.ChannelInfoOutput.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChannelInfoOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChannelInfoOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChannelInfoOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfoOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    channelid: jspb.Message.getField(msg, 2),
    channelname: jspb.Message.getField(msg, 3),
    adminuserid: jspb.Message.getField(msg, 4),
    firsttenuseridsList: jspb.Message.getRepeatedField(msg, 5),
    openstatus: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChannelInfoOutput}
 */
proto.Protobuf.ChannelInfoOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChannelInfoOutput;
  return proto.Protobuf.ChannelInfoOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChannelInfoOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChannelInfoOutput}
 */
proto.Protobuf.ChannelInfoOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protobuf.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addFirsttenuserids(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpenstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChannelInfoOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChannelInfoOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChannelInfoOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfoOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFirsttenuseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required ChannelType type = 1;
 * @return {!proto.Protobuf.ChannelType}
 */
proto.Protobuf.ChannelInfoOutput.prototype.getType = function() {
  return /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.Protobuf.ChannelType} value */
proto.Protobuf.ChannelInfoOutput.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChannelInfoOutput.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfoOutput.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string channelId = 2;
 * @return {string}
 */
proto.Protobuf.ChannelInfoOutput.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.ChannelInfoOutput.prototype.setChannelid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.ChannelInfoOutput.prototype.clearChannelid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfoOutput.prototype.hasChannelid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string channelName = 3;
 * @return {string}
 */
proto.Protobuf.ChannelInfoOutput.prototype.getChannelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protobuf.ChannelInfoOutput.prototype.setChannelname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.ChannelInfoOutput.prototype.clearChannelname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfoOutput.prototype.hasChannelname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string adminUserId = 4;
 * @return {string}
 */
proto.Protobuf.ChannelInfoOutput.prototype.getAdminuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protobuf.ChannelInfoOutput.prototype.setAdminuserid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.ChannelInfoOutput.prototype.clearAdminuserid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfoOutput.prototype.hasAdminuserid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string firstTenUserIds = 5;
 * @return {!Array<string>}
 */
proto.Protobuf.ChannelInfoOutput.prototype.getFirsttenuseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.Protobuf.ChannelInfoOutput.prototype.setFirsttenuseridsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Protobuf.ChannelInfoOutput.prototype.addFirsttenuserids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.Protobuf.ChannelInfoOutput.prototype.clearFirsttenuseridsList = function() {
  this.setFirsttenuseridsList([]);
};


/**
 * required int32 openStatus = 6;
 * @return {number}
 */
proto.Protobuf.ChannelInfoOutput.prototype.getOpenstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Protobuf.ChannelInfoOutput.prototype.setOpenstatus = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Protobuf.ChannelInfoOutput.prototype.clearOpenstatus = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfoOutput.prototype.hasOpenstatus = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChannelInfosInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ChannelInfosInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChannelInfosInput.displayName = 'proto.Protobuf.ChannelInfosInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChannelInfosInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChannelInfosInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChannelInfosInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfosInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getField(msg, 1),
    number: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChannelInfosInput}
 */
proto.Protobuf.ChannelInfosInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChannelInfosInput;
  return proto.Protobuf.ChannelInfosInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChannelInfosInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChannelInfosInput}
 */
proto.Protobuf.ChannelInfosInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChannelInfosInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChannelInfosInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChannelInfosInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfosInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 page = 1;
 * @return {number}
 */
proto.Protobuf.ChannelInfosInput.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ChannelInfosInput.prototype.setPage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChannelInfosInput.prototype.clearPage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfosInput.prototype.hasPage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.Protobuf.ChannelInfosInput.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.ChannelInfosInput.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.ChannelInfosInput.prototype.clearNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfosInput.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChannelInfosOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.ChannelInfosOutput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.ChannelInfosOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChannelInfosOutput.displayName = 'proto.Protobuf.ChannelInfosOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.ChannelInfosOutput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChannelInfosOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChannelInfosOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChannelInfosOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfosOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.Protobuf.ChannelInfoOutput.toObject, includeInstance),
    total: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChannelInfosOutput}
 */
proto.Protobuf.ChannelInfosOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChannelInfosOutput;
  return proto.Protobuf.ChannelInfosOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChannelInfosOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChannelInfosOutput}
 */
proto.Protobuf.ChannelInfosOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.ChannelInfoOutput;
      reader.readMessage(value,proto.Protobuf.ChannelInfoOutput.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChannelInfosOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChannelInfosOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChannelInfosOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChannelInfosOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.ChannelInfoOutput.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated ChannelInfoOutput channels = 1;
 * @return {!Array<!proto.Protobuf.ChannelInfoOutput>}
 */
proto.Protobuf.ChannelInfosOutput.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.Protobuf.ChannelInfoOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.ChannelInfoOutput, 1));
};


/** @param {!Array<!proto.Protobuf.ChannelInfoOutput>} value */
proto.Protobuf.ChannelInfosOutput.prototype.setChannelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.ChannelInfoOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.ChannelInfoOutput}
 */
proto.Protobuf.ChannelInfosOutput.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.ChannelInfoOutput, opt_index);
};


proto.Protobuf.ChannelInfosOutput.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};


/**
 * required int32 total = 2;
 * @return {number}
 */
proto.Protobuf.ChannelInfosOutput.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.ChannelInfosOutput.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.ChannelInfosOutput.prototype.clearTotal = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChannelInfosOutput.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.MemberInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.MemberInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.MemberInfo.displayName = 'proto.Protobuf.MemberInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.MemberInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.MemberInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.MemberInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.MemberInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    userportrait: jspb.Message.getField(msg, 3),
    extension: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.MemberInfo}
 */
proto.Protobuf.MemberInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.MemberInfo;
  return proto.Protobuf.MemberInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.MemberInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.MemberInfo}
 */
proto.Protobuf.MemberInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserportrait(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtension$(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.MemberInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.MemberInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.MemberInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.MemberInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string userId = 1;
 * @return {string}
 */
proto.Protobuf.MemberInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.MemberInfo.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.MemberInfo.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MemberInfo.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userName = 2;
 * @return {string}
 */
proto.Protobuf.MemberInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.MemberInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.MemberInfo.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MemberInfo.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string userPortrait = 3;
 * @return {string}
 */
proto.Protobuf.MemberInfo.prototype.getUserportrait = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protobuf.MemberInfo.prototype.setUserportrait = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.MemberInfo.prototype.clearUserportrait = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MemberInfo.prototype.hasUserportrait = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string extension = 4;
 * @return {string}
 */
proto.Protobuf.MemberInfo.prototype.getExtension$ = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protobuf.MemberInfo.prototype.setExtension$ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Protobuf.MemberInfo.prototype.clearExtension$ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.MemberInfo.prototype.hasExtension$ = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupMembersInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GroupMembersInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupMembersInput.displayName = 'proto.Protobuf.GroupMembersInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupMembersInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupMembersInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupMembersInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupMembersInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getField(msg, 1),
    number: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupMembersInput}
 */
proto.Protobuf.GroupMembersInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupMembersInput;
  return proto.Protobuf.GroupMembersInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupMembersInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupMembersInput}
 */
proto.Protobuf.GroupMembersInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupMembersInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupMembersInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupMembersInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupMembersInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 page = 1;
 * @return {number}
 */
proto.Protobuf.GroupMembersInput.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.GroupMembersInput.prototype.setPage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GroupMembersInput.prototype.clearPage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupMembersInput.prototype.hasPage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.Protobuf.GroupMembersInput.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.GroupMembersInput.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GroupMembersInput.prototype.clearNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupMembersInput.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupMembersOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.GroupMembersOutput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.GroupMembersOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupMembersOutput.displayName = 'proto.Protobuf.GroupMembersOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.GroupMembersOutput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupMembersOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupMembersOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupMembersOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupMembersOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.Protobuf.MemberInfo.toObject, includeInstance),
    total: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupMembersOutput}
 */
proto.Protobuf.GroupMembersOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupMembersOutput;
  return proto.Protobuf.GroupMembersOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupMembersOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupMembersOutput}
 */
proto.Protobuf.GroupMembersOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.MemberInfo;
      reader.readMessage(value,proto.Protobuf.MemberInfo.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupMembersOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupMembersOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupMembersOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupMembersOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.MemberInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated MemberInfo members = 1;
 * @return {!Array<!proto.Protobuf.MemberInfo>}
 */
proto.Protobuf.GroupMembersOutput.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.Protobuf.MemberInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.MemberInfo, 1));
};


/** @param {!Array<!proto.Protobuf.MemberInfo>} value */
proto.Protobuf.GroupMembersOutput.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.MemberInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.MemberInfo}
 */
proto.Protobuf.GroupMembersOutput.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.MemberInfo, opt_index);
};


proto.Protobuf.GroupMembersOutput.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * required int32 total = 2;
 * @return {number}
 */
proto.Protobuf.GroupMembersOutput.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.GroupMembersOutput.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GroupMembersOutput.prototype.clearTotal = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupMembersOutput.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetUserInfoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetUserInfoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetUserInfoInput.displayName = 'proto.Protobuf.GetUserInfoInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetUserInfoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetUserInfoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetUserInfoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetUserInfoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetUserInfoInput}
 */
proto.Protobuf.GetUserInfoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetUserInfoInput;
  return proto.Protobuf.GetUserInfoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetUserInfoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetUserInfoInput}
 */
proto.Protobuf.GetUserInfoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetUserInfoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetUserInfoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetUserInfoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetUserInfoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.GetUserInfoInput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.GetUserInfoInput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetUserInfoInput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetUserInfoInput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetUserInfoOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetUserInfoOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetUserInfoOutput.displayName = 'proto.Protobuf.GetUserInfoOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetUserInfoOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetUserInfoOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetUserInfoOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetUserInfoOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    userportrait: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetUserInfoOutput}
 */
proto.Protobuf.GetUserInfoOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetUserInfoOutput;
  return proto.Protobuf.GetUserInfoOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetUserInfoOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetUserInfoOutput}
 */
proto.Protobuf.GetUserInfoOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserportrait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetUserInfoOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetUserInfoOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetUserInfoOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetUserInfoOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string userId = 1;
 * @return {string}
 */
proto.Protobuf.GetUserInfoOutput.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.GetUserInfoOutput.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetUserInfoOutput.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetUserInfoOutput.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userName = 2;
 * @return {string}
 */
proto.Protobuf.GetUserInfoOutput.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.GetUserInfoOutput.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GetUserInfoOutput.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetUserInfoOutput.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string userPortrait = 3;
 * @return {string}
 */
proto.Protobuf.GetUserInfoOutput.prototype.getUserportrait = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protobuf.GetUserInfoOutput.prototype.setUserportrait = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Protobuf.GetUserInfoOutput.prototype.clearUserportrait = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetUserInfoOutput.prototype.hasUserportrait = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetSessionIdInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetSessionIdInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetSessionIdInput.displayName = 'proto.Protobuf.GetSessionIdInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetSessionIdInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetSessionIdInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetSessionIdInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetSessionIdInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetSessionIdInput}
 */
proto.Protobuf.GetSessionIdInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetSessionIdInput;
  return proto.Protobuf.GetSessionIdInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetSessionIdInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetSessionIdInput}
 */
proto.Protobuf.GetSessionIdInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetSessionIdInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetSessionIdInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetSessionIdInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetSessionIdInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.GetSessionIdInput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.GetSessionIdInput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetSessionIdInput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetSessionIdInput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetSessionIdOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetSessionIdOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetSessionIdOutput.displayName = 'proto.Protobuf.GetSessionIdOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetSessionIdOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetSessionIdOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetSessionIdOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetSessionIdOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetSessionIdOutput}
 */
proto.Protobuf.GetSessionIdOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetSessionIdOutput;
  return proto.Protobuf.GetSessionIdOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetSessionIdOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetSessionIdOutput}
 */
proto.Protobuf.GetSessionIdOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetSessionIdOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetSessionIdOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetSessionIdOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetSessionIdOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 sessionId = 1;
 * @return {number}
 */
proto.Protobuf.GetSessionIdOutput.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.GetSessionIdOutput.prototype.setSessionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetSessionIdOutput.prototype.clearSessionid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetSessionIdOutput.prototype.hasSessionid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetQNupTokenInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetQNupTokenInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetQNupTokenInput.displayName = 'proto.Protobuf.GetQNupTokenInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetQNupTokenInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetQNupTokenInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetQNupTokenInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNupTokenInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetQNupTokenInput}
 */
proto.Protobuf.GetQNupTokenInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetQNupTokenInput;
  return proto.Protobuf.GetQNupTokenInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetQNupTokenInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetQNupTokenInput}
 */
proto.Protobuf.GetQNupTokenInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protobuf.FileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetQNupTokenInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetQNupTokenInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetQNupTokenInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNupTokenInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Protobuf.FileType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required FileType type = 1;
 * @return {!proto.Protobuf.FileType}
 */
proto.Protobuf.GetQNupTokenInput.prototype.getType = function() {
  return /** @type {!proto.Protobuf.FileType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.Protobuf.FileType} value */
proto.Protobuf.GetQNupTokenInput.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetQNupTokenInput.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetQNupTokenInput.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetQNdownloadUrlInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetQNdownloadUrlInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetQNdownloadUrlInput.displayName = 'proto.Protobuf.GetQNdownloadUrlInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetQNdownloadUrlInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetQNdownloadUrlInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetQNdownloadUrlInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNdownloadUrlInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    key: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetQNdownloadUrlInput}
 */
proto.Protobuf.GetQNdownloadUrlInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetQNdownloadUrlInput;
  return proto.Protobuf.GetQNdownloadUrlInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetQNdownloadUrlInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetQNdownloadUrlInput}
 */
proto.Protobuf.GetQNdownloadUrlInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protobuf.FileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetQNdownloadUrlInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetQNdownloadUrlInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetQNdownloadUrlInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNdownloadUrlInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Protobuf.FileType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required FileType type = 1;
 * @return {!proto.Protobuf.FileType}
 */
proto.Protobuf.GetQNdownloadUrlInput.prototype.getType = function() {
  return /** @type {!proto.Protobuf.FileType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.Protobuf.FileType} value */
proto.Protobuf.GetQNdownloadUrlInput.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetQNdownloadUrlInput.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetQNdownloadUrlInput.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.Protobuf.GetQNdownloadUrlInput.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.GetQNdownloadUrlInput.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GetQNdownloadUrlInput.prototype.clearKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetQNdownloadUrlInput.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetQNupTokenOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetQNupTokenOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetQNupTokenOutput.displayName = 'proto.Protobuf.GetQNupTokenOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetQNupTokenOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetQNupTokenOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetQNupTokenOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNupTokenOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadline: jspb.Message.getField(msg, 1),
    token: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetQNupTokenOutput}
 */
proto.Protobuf.GetQNupTokenOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetQNupTokenOutput;
  return proto.Protobuf.GetQNupTokenOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetQNupTokenOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetQNupTokenOutput}
 */
proto.Protobuf.GetQNupTokenOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeadline(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetQNupTokenOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetQNupTokenOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetQNupTokenOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNupTokenOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int64 deadline = 1;
 * @return {number}
 */
proto.Protobuf.GetQNupTokenOutput.prototype.getDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.GetQNupTokenOutput.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetQNupTokenOutput.prototype.clearDeadline = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetQNupTokenOutput.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string token = 2;
 * @return {string}
 */
proto.Protobuf.GetQNupTokenOutput.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.GetQNupTokenOutput.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GetQNupTokenOutput.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetQNupTokenOutput.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GetQNdownloadUrlOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GetQNdownloadUrlOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GetQNdownloadUrlOutput.displayName = 'proto.Protobuf.GetQNdownloadUrlOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GetQNdownloadUrlOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GetQNdownloadUrlOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GetQNdownloadUrlOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNdownloadUrlOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    downloadurl: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GetQNdownloadUrlOutput}
 */
proto.Protobuf.GetQNdownloadUrlOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GetQNdownloadUrlOutput;
  return proto.Protobuf.GetQNdownloadUrlOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GetQNdownloadUrlOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GetQNdownloadUrlOutput}
 */
proto.Protobuf.GetQNdownloadUrlOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownloadurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GetQNdownloadUrlOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GetQNdownloadUrlOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GetQNdownloadUrlOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GetQNdownloadUrlOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string downloadUrl = 1;
 * @return {string}
 */
proto.Protobuf.GetQNdownloadUrlOutput.prototype.getDownloadurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.GetQNdownloadUrlOutput.prototype.setDownloadurl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GetQNdownloadUrlOutput.prototype.clearDownloadurl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GetQNdownloadUrlOutput.prototype.hasDownloadurl = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Add2BlackListInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.Add2BlackListInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.Add2BlackListInput.displayName = 'proto.Protobuf.Add2BlackListInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Add2BlackListInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Add2BlackListInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Add2BlackListInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Add2BlackListInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Add2BlackListInput}
 */
proto.Protobuf.Add2BlackListInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Add2BlackListInput;
  return proto.Protobuf.Add2BlackListInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Add2BlackListInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Add2BlackListInput}
 */
proto.Protobuf.Add2BlackListInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Add2BlackListInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Add2BlackListInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Add2BlackListInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Add2BlackListInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string userId = 1;
 * @return {string}
 */
proto.Protobuf.Add2BlackListInput.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.Add2BlackListInput.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.Add2BlackListInput.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.Add2BlackListInput.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.RemoveFromBlackListInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.RemoveFromBlackListInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.RemoveFromBlackListInput.displayName = 'proto.Protobuf.RemoveFromBlackListInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.RemoveFromBlackListInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.RemoveFromBlackListInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.RemoveFromBlackListInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RemoveFromBlackListInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.RemoveFromBlackListInput}
 */
proto.Protobuf.RemoveFromBlackListInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.RemoveFromBlackListInput;
  return proto.Protobuf.RemoveFromBlackListInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.RemoveFromBlackListInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.RemoveFromBlackListInput}
 */
proto.Protobuf.RemoveFromBlackListInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.RemoveFromBlackListInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.RemoveFromBlackListInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.RemoveFromBlackListInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RemoveFromBlackListInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string userId = 1;
 * @return {string}
 */
proto.Protobuf.RemoveFromBlackListInput.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.RemoveFromBlackListInput.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.RemoveFromBlackListInput.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RemoveFromBlackListInput.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryBlackListInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.QueryBlackListInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryBlackListInput.displayName = 'proto.Protobuf.QueryBlackListInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryBlackListInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryBlackListInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryBlackListInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryBlackListInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryBlackListInput}
 */
proto.Protobuf.QueryBlackListInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryBlackListInput;
  return proto.Protobuf.QueryBlackListInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryBlackListInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryBlackListInput}
 */
proto.Protobuf.QueryBlackListInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryBlackListInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryBlackListInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryBlackListInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryBlackListInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.QueryBlackListInput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.QueryBlackListInput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.QueryBlackListInput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.QueryBlackListInput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.QueryBlackListOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.QueryBlackListOutput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.QueryBlackListOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.QueryBlackListOutput.displayName = 'proto.Protobuf.QueryBlackListOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.QueryBlackListOutput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.QueryBlackListOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.QueryBlackListOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.QueryBlackListOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryBlackListOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    useridsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.QueryBlackListOutput}
 */
proto.Protobuf.QueryBlackListOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.QueryBlackListOutput;
  return proto.Protobuf.QueryBlackListOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.QueryBlackListOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.QueryBlackListOutput}
 */
proto.Protobuf.QueryBlackListOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.QueryBlackListOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.QueryBlackListOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.QueryBlackListOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.QueryBlackListOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string userIds = 1;
 * @return {!Array<string>}
 */
proto.Protobuf.QueryBlackListOutput.prototype.getUseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.Protobuf.QueryBlackListOutput.prototype.setUseridsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Protobuf.QueryBlackListOutput.prototype.addUserids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Protobuf.QueryBlackListOutput.prototype.clearUseridsList = function() {
  this.setUseridsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.BlackListStatusInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.BlackListStatusInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.BlackListStatusInput.displayName = 'proto.Protobuf.BlackListStatusInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.BlackListStatusInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.BlackListStatusInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.BlackListStatusInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.BlackListStatusInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.BlackListStatusInput}
 */
proto.Protobuf.BlackListStatusInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.BlackListStatusInput;
  return proto.Protobuf.BlackListStatusInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.BlackListStatusInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.BlackListStatusInput}
 */
proto.Protobuf.BlackListStatusInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.BlackListStatusInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.BlackListStatusInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.BlackListStatusInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.BlackListStatusInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string userId = 1;
 * @return {string}
 */
proto.Protobuf.BlackListStatusInput.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.BlackListStatusInput.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.BlackListStatusInput.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.BlackListStatusInput.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.BlockPushInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.BlockPushInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.BlockPushInput.displayName = 'proto.Protobuf.BlockPushInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.BlockPushInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.BlockPushInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.BlockPushInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.BlockPushInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockeeid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.BlockPushInput}
 */
proto.Protobuf.BlockPushInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.BlockPushInput;
  return proto.Protobuf.BlockPushInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.BlockPushInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.BlockPushInput}
 */
proto.Protobuf.BlockPushInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockeeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.BlockPushInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.BlockPushInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.BlockPushInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.BlockPushInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string blockeeId = 1;
 * @return {string}
 */
proto.Protobuf.BlockPushInput.prototype.getBlockeeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.BlockPushInput.prototype.setBlockeeid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.BlockPushInput.prototype.clearBlockeeid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.BlockPushInput.prototype.hasBlockeeid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ModifyPermissionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ModifyPermissionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ModifyPermissionInput.displayName = 'proto.Protobuf.ModifyPermissionInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ModifyPermissionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ModifyPermissionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ModifyPermissionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ModifyPermissionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    openstatus: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ModifyPermissionInput}
 */
proto.Protobuf.ModifyPermissionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ModifyPermissionInput;
  return proto.Protobuf.ModifyPermissionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ModifyPermissionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ModifyPermissionInput}
 */
proto.Protobuf.ModifyPermissionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpenstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ModifyPermissionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ModifyPermissionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ModifyPermissionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ModifyPermissionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 openStatus = 1;
 * @return {number}
 */
proto.Protobuf.ModifyPermissionInput.prototype.getOpenstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ModifyPermissionInput.prototype.setOpenstatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ModifyPermissionInput.prototype.clearOpenstatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ModifyPermissionInput.prototype.hasOpenstatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.GroupInput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.GroupInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupInput.displayName = 'proto.Protobuf.GroupInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.GroupInput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupinfoList: jspb.Message.toObjectList(msg.getGroupinfoList(),
    proto.Protobuf.GroupInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupInput}
 */
proto.Protobuf.GroupInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupInput;
  return proto.Protobuf.GroupInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupInput}
 */
proto.Protobuf.GroupInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.GroupInfo;
      reader.readMessage(value,proto.Protobuf.GroupInfo.deserializeBinaryFromReader);
      msg.addGroupinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.GroupInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupInfo groupInfo = 1;
 * @return {!Array<!proto.Protobuf.GroupInfo>}
 */
proto.Protobuf.GroupInput.prototype.getGroupinfoList = function() {
  return /** @type{!Array<!proto.Protobuf.GroupInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.GroupInfo, 1));
};


/** @param {!Array<!proto.Protobuf.GroupInfo>} value */
proto.Protobuf.GroupInput.prototype.setGroupinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.GroupInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.GroupInfo}
 */
proto.Protobuf.GroupInput.prototype.addGroupinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.GroupInfo, opt_index);
};


proto.Protobuf.GroupInput.prototype.clearGroupinfoList = function() {
  this.setGroupinfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GroupOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupOutput.displayName = 'proto.Protobuf.GroupOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupOutput}
 */
proto.Protobuf.GroupOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupOutput;
  return proto.Protobuf.GroupOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupOutput}
 */
proto.Protobuf.GroupOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.GroupOutput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.GroupOutput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GroupOutput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupOutput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupInfo.displayName = 'proto.Protobuf.GroupInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupInfo}
 */
proto.Protobuf.GroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupInfo;
  return proto.Protobuf.GroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupInfo}
 */
proto.Protobuf.GroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.Protobuf.GroupInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.GroupInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GroupInfo.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.Protobuf.GroupInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.GroupInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GroupInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupHashInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GroupHashInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupHashInput.displayName = 'proto.Protobuf.GroupHashInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupHashInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupHashInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupHashInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupHashInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    grouphashcode: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupHashInput}
 */
proto.Protobuf.GroupHashInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupHashInput;
  return proto.Protobuf.GroupHashInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupHashInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupHashInput}
 */
proto.Protobuf.GroupHashInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouphashcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupHashInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupHashInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupHashInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupHashInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string userId = 1;
 * @return {string}
 */
proto.Protobuf.GroupHashInput.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protobuf.GroupHashInput.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GroupHashInput.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupHashInput.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string groupHashCode = 2;
 * @return {string}
 */
proto.Protobuf.GroupHashInput.prototype.getGrouphashcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.GroupHashInput.prototype.setGrouphashcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.GroupHashInput.prototype.clearGrouphashcode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupHashInput.prototype.hasGrouphashcode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.GroupHashOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.GroupHashOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.GroupHashOutput.displayName = 'proto.Protobuf.GroupHashOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.GroupHashOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.GroupHashOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.GroupHashOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupHashOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.GroupHashOutput}
 */
proto.Protobuf.GroupHashOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.GroupHashOutput;
  return proto.Protobuf.GroupHashOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.GroupHashOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.GroupHashOutput}
 */
proto.Protobuf.GroupHashOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protobuf.GroupHashType} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.GroupHashOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.GroupHashOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.GroupHashOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.GroupHashOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Protobuf.GroupHashType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required GroupHashType result = 1;
 * @return {!proto.Protobuf.GroupHashType}
 */
proto.Protobuf.GroupHashOutput.prototype.getResult = function() {
  return /** @type {!proto.Protobuf.GroupHashType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Protobuf.GroupHashType} value */
proto.Protobuf.GroupHashOutput.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.GroupHashOutput.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.GroupHashOutput.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChrmInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ChrmInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChrmInput.displayName = 'proto.Protobuf.ChrmInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChrmInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChrmInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChrmInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChrmInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChrmInput}
 */
proto.Protobuf.ChrmInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChrmInput;
  return proto.Protobuf.ChrmInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChrmInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChrmInput}
 */
proto.Protobuf.ChrmInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChrmInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChrmInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChrmInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChrmInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.ChrmInput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ChrmInput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChrmInput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChrmInput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChrmOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ChrmOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChrmOutput.displayName = 'proto.Protobuf.ChrmOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChrmOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChrmOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChrmOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChrmOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothing: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChrmOutput}
 */
proto.Protobuf.ChrmOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChrmOutput;
  return proto.Protobuf.ChrmOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChrmOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChrmOutput}
 */
proto.Protobuf.ChrmOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChrmOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChrmOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChrmOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChrmOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 nothing = 1;
 * @return {number}
 */
proto.Protobuf.ChrmOutput.prototype.getNothing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ChrmOutput.prototype.setNothing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChrmOutput.prototype.clearNothing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChrmOutput.prototype.hasNothing = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.ChrmPullMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.ChrmPullMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.ChrmPullMsg.displayName = 'proto.Protobuf.ChrmPullMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.ChrmPullMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.ChrmPullMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.ChrmPullMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChrmPullMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    synctime: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.ChrmPullMsg}
 */
proto.Protobuf.ChrmPullMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.ChrmPullMsg;
  return proto.Protobuf.ChrmPullMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.ChrmPullMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.ChrmPullMsg}
 */
proto.Protobuf.ChrmPullMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSynctime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.ChrmPullMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.ChrmPullMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.ChrmPullMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.ChrmPullMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int64 syncTime = 1;
 * @return {number}
 */
proto.Protobuf.ChrmPullMsg.prototype.getSynctime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protobuf.ChrmPullMsg.prototype.setSynctime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.ChrmPullMsg.prototype.clearSynctime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChrmPullMsg.prototype.hasSynctime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 count = 2;
 * @return {number}
 */
proto.Protobuf.ChrmPullMsg.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protobuf.ChrmPullMsg.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.ChrmPullMsg.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.ChrmPullMsg.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.RelationsInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.RelationsInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.RelationsInput.displayName = 'proto.Protobuf.RelationsInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.RelationsInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.RelationsInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.RelationsInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RelationsInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    msg: (f = msg.getMsg()) && proto.Protobuf.DownStreamMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.RelationsInput}
 */
proto.Protobuf.RelationsInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.RelationsInput;
  return proto.Protobuf.RelationsInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.RelationsInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.RelationsInput}
 */
proto.Protobuf.RelationsInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protobuf.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Protobuf.DownStreamMessage;
      reader.readMessage(value,proto.Protobuf.DownStreamMessage.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.RelationsInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.RelationsInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.RelationsInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RelationsInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Protobuf.DownStreamMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required ChannelType type = 1;
 * @return {!proto.Protobuf.ChannelType}
 */
proto.Protobuf.RelationsInput.prototype.getType = function() {
  return /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.Protobuf.ChannelType} value */
proto.Protobuf.RelationsInput.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.RelationsInput.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RelationsInput.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DownStreamMessage msg = 2;
 * @return {?proto.Protobuf.DownStreamMessage}
 */
proto.Protobuf.RelationsInput.prototype.getMsg = function() {
  return /** @type{?proto.Protobuf.DownStreamMessage} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.DownStreamMessage, 2));
};


/** @param {?proto.Protobuf.DownStreamMessage|undefined} value */
proto.Protobuf.RelationsInput.prototype.setMsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Protobuf.RelationsInput.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RelationsInput.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.RelationsOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.RelationsOutput.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.RelationsOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.RelationsOutput.displayName = 'proto.Protobuf.RelationsOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.RelationsOutput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.RelationsOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.RelationsOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.RelationsOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RelationsOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.Protobuf.RelationInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.RelationsOutput}
 */
proto.Protobuf.RelationsOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.RelationsOutput;
  return proto.Protobuf.RelationsOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.RelationsOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.RelationsOutput}
 */
proto.Protobuf.RelationsOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.RelationInfo;
      reader.readMessage(value,proto.Protobuf.RelationInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.RelationsOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.RelationsOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.RelationsOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RelationsOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.RelationInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RelationInfo info = 1;
 * @return {!Array<!proto.Protobuf.RelationInfo>}
 */
proto.Protobuf.RelationsOutput.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.Protobuf.RelationInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.RelationInfo, 1));
};


/** @param {!Array<!proto.Protobuf.RelationInfo>} value */
proto.Protobuf.RelationsOutput.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.RelationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.RelationInfo}
 */
proto.Protobuf.RelationsOutput.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.RelationInfo, opt_index);
};


proto.Protobuf.RelationsOutput.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.RelationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.RelationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protobuf.RelationInfo.displayName = 'proto.Protobuf.RelationInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.RelationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.RelationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.RelationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RelationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2),
    msg: (f = msg.getMsg()) && proto.Protobuf.DownStreamMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.RelationInfo}
 */
proto.Protobuf.RelationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.RelationInfo;
  return proto.Protobuf.RelationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.RelationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.RelationInfo}
 */
proto.Protobuf.RelationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protobuf.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = new proto.Protobuf.DownStreamMessage;
      reader.readMessage(value,proto.Protobuf.DownStreamMessage.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.RelationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.RelationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.RelationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.RelationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protobuf.DownStreamMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required ChannelType type = 1;
 * @return {!proto.Protobuf.ChannelType}
 */
proto.Protobuf.RelationInfo.prototype.getType = function() {
  return /** @type {!proto.Protobuf.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.Protobuf.ChannelType} value */
proto.Protobuf.RelationInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Protobuf.RelationInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RelationInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userId = 2;
 * @return {string}
 */
proto.Protobuf.RelationInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protobuf.RelationInfo.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Protobuf.RelationInfo.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RelationInfo.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DownStreamMessage msg = 3;
 * @return {?proto.Protobuf.DownStreamMessage}
 */
proto.Protobuf.RelationInfo.prototype.getMsg = function() {
  return /** @type{?proto.Protobuf.DownStreamMessage} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.DownStreamMessage, 3));
};


/** @param {?proto.Protobuf.DownStreamMessage|undefined} value */
proto.Protobuf.RelationInfo.prototype.setMsg = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Protobuf.RelationInfo.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protobuf.RelationInfo.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.Protobuf.ChannelType = {
  PERSON: 1,
  PERSONS: 2,
  GROUP: 3,
  TEMPGROUP: 4,
  CUSTOMERSERVICE: 5,
  NOTIFY: 6
};

/**
 * @enum {number}
 */
proto.Protobuf.FileType = {
  IMAGE: 1,
  AUDIO: 2,
  VIDEO: 3
};

/**
 * @enum {number}
 */
proto.Protobuf.GroupHashType = {
  GROUP_SUCCESS: 0,
  GROUP_FAILURE: 1
};

goog.object.extend(exports, proto.Protobuf);
